# from simsio import gen_configs
# import numpy as np
# params = {
#     "train_frac": np.arange(6, 10) / 10,
#     "augment_frac": np.arange(4) / 3,
# }
# gen_configs("template", params, "II/1C")
===:
  template: |
    n$enum:      
      <<<: common
      input: {train_frac: $train_frac, augment_frac: $augment_frac}
  common:
    samples: 100
    input:
      N: 4000
      rescale: 50
      augment_std: 0.05773502691896
    model:
      layers:
      - tf.keras.layers.Dense(2, activation="relu")
      - tf.keras.layers.Dense(20, activation="relu")
      - tf.keras.layers.Dense(20, activation="relu")
      - tf.keras.layers.Dropout(0.2)
      - tf.keras.layers.Dense(1, activation="sigmoid")
    compile:
      loss: binary_crossentropy
      optimizer: adam
      metrics: [accuracy]
      steps_per_execution: 4
    fit:
      epochs: 500
      batch_size: 50
      verbose: 0
n0:
  <<<: common
  input: {train_frac: 0.6, augment_frac: 0.0}
n1:
  <<<: common
  input: {train_frac: 0.6, augment_frac: 0.3333333333333333}
n2:
  <<<: common
  input: {train_frac: 0.6, augment_frac: 0.6666666666666666}
n3:
  <<<: common
  input: {train_frac: 0.6, augment_frac: 1.0}
n4:
  <<<: common
  input: {train_frac: 0.7, augment_frac: 0.0}
n5:
  <<<: common
  input: {train_frac: 0.7, augment_frac: 0.3333333333333333}
n6:
  <<<: common
  input: {train_frac: 0.7, augment_frac: 0.6666666666666666}
n7:
  <<<: common
  input: {train_frac: 0.7, augment_frac: 1.0}
n8:
  <<<: common
  input: {train_frac: 0.8, augment_frac: 0.0}
n9:
  <<<: common
  input: {train_frac: 0.8, augment_frac: 0.3333333333333333}
n10:
  <<<: common
  input: {train_frac: 0.8, augment_frac: 0.6666666666666666}
n11:
  <<<: common
  input: {train_frac: 0.8, augment_frac: 1.0}
n12:
  <<<: common
  input: {train_frac: 0.9, augment_frac: 0.0}
n13:
  <<<: common
  input: {train_frac: 0.9, augment_frac: 0.3333333333333333}
n14:
  <<<: common
  input: {train_frac: 0.9, augment_frac: 0.6666666666666666}
n15:
  <<<: common
  input: {train_frac: 0.9, augment_frac: 1.0}


